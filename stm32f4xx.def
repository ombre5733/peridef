/*
   Copyright Manuel Freiberger 2013.
   Distributed under the Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt or copy at
   http://www.boost.org/LICENSE_1_0.txt)
*/

tuple(CAN_TxMailBox)
{
    register(TIR, 32)
    {
        bit(TXRQ)
        bit(RTR)
        bit(IDE)
        bit(EXID, 18)
        bit(STID, 11)
    }
    register(TDTR, 32)
    {
        bit(DLC, 4)
        reserved(4)
        bit(TGT)
        reserved(7)
        bit(TIME, 16)
    }
    register(TDLR, 32)
    register(TDHR, 32)
}

tuple(CAN_FifoMailBox)
{
    register(RIR, 32)
    {
        reserved(1)
        bit(RTR)
        bit(IDE)
        bit(EXID, 18)
        bit(STID, 11)
    }
    register(RDTR, 32)
    {
        bit(DLC, 4)
        reserved(4)
        bit(FMI, 8)
        bit(TIME, 16)
    }
    register(RDLR, 32)
    register(RDHR, 32)
}

tuple(CAN_FilterRegister)
{
    register(FR1, 32)
    register(FR2, 32)
}

peripheral(CAN, help="Controller area network")
{
    register(MCR, 32)
    register(MSR, 16)
    reserved(16)
    register(TSR, 32)
    register(RF0R, 32)
    register(RF1R, 32)
    register(IER, 32)
    register(ESR, 32)
    register(BTR, 32)
    reserved(32, arraySize=88)
    register(TxMailBox, CAN_TxMailBox, arraySize=3)
    register(FifoMailBox, CAN_FifoMailBox, arraySize=2)
    reserved(32, arraySize=12)
    register(FMR, 16)
    reserved(16)
    register(FM1R, 32)
    reserved(32)
    register(FS1R, 32)
    reserved(32)
    register(FFA1R, 32)
    reserved(32)
    register(FA1R, 32)
    reserved(32, arraySize=8)
    register(FilterRegister, CAN_FilterRegister, arraySize=28)
}

peripheral(GPIO, help="GPIO port")
{
    register(MODER, 32, help="mode register")
    register(OTYPER, 16, help="output type register")
    reserved(16)
    register(OSPEEDR, 32, help="output speed register")
    register(PUPDR, 32, help="pull-up/pull-down register")
    register(IDR, 16, help="input data register")
    reserved(16)
    register(ODR, 16, help="output data register")
    reserved(16)
    register(BSR, 16, help="bit set register")
    register(BRR, 16, help="bit reset register")
    register(LCKR, 32, help="configuration lock register")
    register(AFR, 32, arraySize=2, help="alternate function register")
}

peripheral(PWR, help="Power control")
{
    register(CR, 16, help="power control register")
    {
        bit(LPDS)
        bit(PDDS)
        bit(CWUF)
        bit(CSBF)
        bit(PVDE)
        bit(PLS, 3)
        bit(DBP)
        bit(FPDS)
        reserved(4)
        bit(VOS)
        reserved(1)
    }
    reserved(16)
    register(CSR, 16, help="power control/status register")
    {
        bit(WUF)
        bit(SBF)
        bit(PVDO)
        bit(BRR)
        reserved(4)
        bit(EWUP)
        bit(BRE)
        reserved(4)
        bit(VOSRDY)
        reserved(1)
    }
    reserved(16)
}

peripheral(RCC)
{
    register(CR, 32, help="clock control register")
    {
        bit(HSION)
        bit(HSIRDY)
        reserved(1)
        bit(HSITRIM, 5)
        bit(HSICAL, 8)
        bit(HSEON)
        bit(HSERDY)
        bit(HSEBYP)
        bit(CSSON)
        reserved(4)
        bit(PLLON)
        bit(PLLRDY)
        bit(PLLI2SON)
        bit(PLLI2RDY)
        reserved(4)
    }
    register(PLLCFGR, 32, help="PLL configuration register")
    {
        bit(PLLM, 6)
        bit(PLLN, 9)
        reserved(1)
        bit(PLLP, 2)
        reserved(4)
        bit(PLLSRC)
        reserved(1)
        bit(PLLQ, 4)
        reserved(4)
    }
    register(CFGR, 32, help="clock configuration register")
    {
        bit(SW, 2)
        bit(SWS, 2)
        bit(HPRE, 4)
        reserved(2)
        bit(PPRE1, 3)
        bit(PPRE2, 3)
        bit(RTCPRE, 5)
        bit(MCO1, 2)
        bit(I2SSRC)
        bit(MCO1PRE, 3)
        bit(MCO2PRE, 3)
        bit(MCO, 2)
    }
    register(CIR, 32, help="clock interrupt register")
    register(AHB1RSTR, 32, help="AHB1 peripheral reset register")
    {
        bit(GPIOARST)
        bit(GPIOBRST)
        bit(GPIOCRST)
        bit(GPIODRST)
        bit(GPIOERST)
        bit(GPIOFRST)
        bit(GPIOGRST)
        bit(GPIOHRST)
        bit(GPIOIRST)
        reserved(3)
        bit(CRCRST)
        reserved(8)
        bit(DMA1RST)
        bit(DMA2RST)
        reserved(2)
        bit(ETHMACRST)
        reserved(3)
        bit(OTGHSRST)
        reserved(2)
    }
    register(AHB2RSTR, 32, help="AHB2 peripheral reset register")
    {
        bit(DCMIRST)
        reserved(3)
        bit(CRYPRST)
        bit(HASHRST)
        bit(RNGRST)
        bit(OTGFSRST)
        reserved(24)
    }
    register(AHB3RSTR, 32, help="AHB3 peripheral reset register")
    {
        bit(FSMCRST)
        reserved(31)
    }
    reserved(32)
    register(APB1RSTR, 32, help="APB1 peripheral reset register")
    {
        bit(TIM2RST)
        bit(TIM3RST)
        bit(TIM4RST)
        bit(TIM5RST)
        bit(TIM6RST)
        bit(TIM7RST)
        bit(TIM12RST)
        bit(TIM13RST)
        bit(TIM14RST)
        reserved(2)
        bit(WWDGRST)
        reserved(2)
        bit(SPI2RST)
        bit(SPI3RST)
        reserved(1)
        bit(USART2RST)
        bit(USART3RST)
        bit(UART4RST)
        bit(UART5RST)
        bit(I2C1RST)
        bit(I2C2RST)
        bit(I2C3RST)
        reserved(1)
        bit(CAN1RST)
        bit(CAN2RST)
        reserved(1)
        bit(PWRRST)
        bit(DACRST)
        reserved(2)
    }
    register(APB2RSTR, 32, help="APB2 peripheral reset register")
    {
        bit(TIM1RST)
        bit(TIM8RST)
        reserved(2)
        bit(USART1RST)
        bit(USART6RST)
        reserved(2)
        bit(ADCRST)
        reserved(2)
        bit(SDIORST)
        bit(SPI1RST)
        reserved(1)
        bit(SYSCFGRST)
        reserved(1)
        bit(TIM9RST)
        bit(TIM10RST)
        bit(TIM11RST)
        reserved(13)
    }
    reserved(32, arraySize=2)
    register(AHB1ENR, 32, help="AHB1 peripheral clock enable register")
    {
        bit(GPIOAEN)
        bit(GPIOBEN)
        bit(GPIOCEN)
        bit(GPIODEN)
        bit(GPIOEEN)
        bit(GPIOFEN)
        bit(GPIOGEN)
        bit(GPIOHEN)
        bit(GPIOIEN)
        reserved(3)
        bit(CRCEN)
        reserved(5)
        bit(BKPSRAMEN)
        reserved(1)
        bit(CCMDATARAMEN)
        bit(DMA1EN)
        bit(DMA2EN)
        reserved(2)
        bit(ETHMACEN)
        bit(ETHMACTXEN)
        bit(ETHMACRXEN)
        bit(ETHMACPTPEN)
        bit(OTGHSEN)
        bit(OTGHSULPIEN)
        reserved(1)
    }
    register(AHB2ENR, 32, help="AHB2 peripheral clock enable register")
    {
        bit(DCMIEN)
        reserved(3)
        bit(CRYPEN)
        bit(HASHEN)
        bit(RNGEN)
        bit(OTGFSEN)
        reserved(24)
    }
    register(AHB3ENR, 32, help="AHB3 peripheral clock enable register")
    {
        bit(FSMCEN)
        reserved(31)
    }
    reserved(32)
    register(APB1ENR, 32, help="APB1 peripheral clock enable register")
    {
        bit(TIM2EN)
        bit(TIM3EN)
        bit(TIM4EN)
        bit(TIM5EN)
        bit(TIM6EN)
        bit(TIM7EN)
        bit(TIM12EN)
        bit(TIM13EN)
        bit(TIM14EN)
        reserved(2)
        bit(WWDGEN)
        reserved(2)
        bit(SPI2EN)
        bit(SPI3EN)
        reserved(1)
        bit(USART2EN)
        bit(USART3EN)
        bit(UART4EN)
        bit(UART5EN)
        bit(I2C1EN)
        bit(I2C2EN)
        bit(I2C3EN)
        reserved(1)
        bit(CAN1EN)
        bit(CAN2EN)
        reserved(1)
        bit(PWREN)
        bit(DACEN)
        reserved(2)
    }
    register(APB2ENR, 32, help="APB2 peripheral clock enable register")
    {
        bit(TIM1EN)
        bit(TIM8EN)
        reserved(2)
        bit(USART1EN)
        bit(USART6EN)
        reserved(2)
        bit(ADC1EN)
        bit(ADC2EN)
        bit(ADC3EN)
        bit(SDIOEN)
        bit(SPI1EN)
        reserved(1)
        bit(SYSCFGEN)
        reserved(1)
        bit(TIM9EN)
        bit(TIM10EN)
        bit(TIM11EN)
        reserved(13)
    }
    reserved(32, arraySize=2)
    register(AHB1LPENR, 32, help="AHB1 peripheral clock enable in low power mode register")
    register(AHB2LPENR, 32, help="AHB2 peripheral clock enable in low power mode register")
    register(AHB3LPENR, 32, help="AHB3 peripheral clock enable in low power mode register")
    reserved(32)
    register(APB1LPENR, 32, help="APB1 peripheral clock enable in low power mode register")
    register(APB2LPENR, 32, help="APB2 peripheral clock enable in low power mode register")
    reserved(32, arraySize=2)
    register(BDCR, 32, help="Backup domain control register")
    register(CSR, 32, help="clock control & status register")
    reserved(32, arraySize=2)
    register(SSCGR, 32, help="spread spectrum clock generation register")
    {
        bit(MODPER, 13)
        bit(INCSTEP, 15)
        reserved(2)
        bit(SPREADSEL)
        bit(SSCGEN)
    }
    register(PLLI2SCFGR, 32, help="PLLI2S configuration register")
}

peripheral(USART)
{
    register(SR, 16, help="status register")
    {
        bit(PE)
        bit(FE)
        bit(NF)
        bit(ORE)
        bit(IDLE)
        bit(RXNE)
        bit(TC)
        bit(TXE)
        bit(LBD)
        bit(CTS)
        reserved(6)
    }
    reserved(16)
    register(DR, 16, help="data register")
    {
        bit(DR, 9)
        reserved(7)
    }
    reserved(16)
    register(BRR, 16, help="baud rate register")
    {
        bit(DIV_Fraction, 4)
        bit(DIV_Mantissa, 12)
    }
    reserved(16)
    register(CR1, 16, help="control register 1")
    {
        bit(SBK)
        bit(RWU)
        bit(RE)
        bit(TE)
        bit(IDLEIE)
        bit(RXNEIE)
        bit(TCIE)
        bit(TXEIE)
        bit(PEIE)
        bit(PS)
        bit(PCE)
        bit(WAKE)
        bit(M)
        bit(UE)
        reserved(1)
        bit(OVER8)
    }
    reserved(16)
    register(CR2, 16, help="control register 2")
    {
        bit(ADD, 4)
        reserved(1)
        bit(LBDL)
        bit(LBDIE)
        reserved(1)
        bit(LBCL)
        bit(CPHA)
        bit(CPOL)
        bit(CLKEN)
        bit(STOP, 2)
        bit(LINEN)
        reserved(1)
    }
    reserved(16)
    register(CR3, 16, help="control register 3")
    {
        bit(EIE)
        bit(IREN)
        bit(IRLP)
        bit(HDSEL)
        bit(NACK)
        bit(SCEN)
        bit(DMAR)
        bit(DMAT)
        bit(RTSE)
        bit(CTSE)
        bit(CTSIE)
        bit(ONEBIT)
        reserved(4)
    }
    reserved(16)
    register(GTPR, 16, help="guard time and prescaler register")
    {
        bit(PSC, 8)
        bit(GT, 8)
    }
    reserved(16)
}

// Define the base addresses of the peripheral busses.
address(PERIPHERAL_BASE, 0x40000000)
address(APB1_BASE, PERIPHERAL_BASE, 0x00000000)
address(APB2_BASE, PERIPHERAL_BASE, 0x00010000)
address(AHB1_BASE, PERIPHERAL_BASE, 0x00020000)
address(AHB2_BASE, PERIPHERAL_BASE, 0x10000000)
address(AHB3_BASE, PERIPHERAL_BASE, 0x60000000)

// Map the peripheral definitions to addresses.
map(GPIO, GPIOA, AHB1_BASE, 0x0000)
map(GPIO, GPIOB, AHB1_BASE, 0x0400)
map(GPIO, GPIOC, AHB1_BASE, 0x0800)
map(GPIO, GPIOD, AHB1_BASE, 0x0C00)
map(GPIO, GPIOE, AHB1_BASE, 0x1000)
map(GPIO, GPIOF, AHB1_BASE, 0x1400)
map(GPIO, GPIOG, AHB1_BASE, 0x1800)
map(GPIO, GPIOH, AHB1_BASE, 0x1C00)
map(GPIO, GPIOI, AHB1_BASE, 0x2000)

map(PWR, PWR, APB1_BASE, 0x7000)

map(RCC, RCC, AHB1_BASE, 0x3800)

map(USART, USART2, APB1_BASE, 0x4400)
map(USART, USART3, APB1_BASE, 0x4800)
map(USART, UART4,  APB1_BASE, 0x4C00)
map(USART, UART5,  APB1_BASE, 0x5000)
map(USART, USART1, APB2_BASE, 0x1000)
map(USART, USART6, APB2_BASE, 0x1400)
